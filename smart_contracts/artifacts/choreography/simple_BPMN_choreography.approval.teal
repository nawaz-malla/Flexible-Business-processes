#pragma version 10
#pragma typetrack false

// smart_contracts.choreography.contract.simple_BPMN_choreography.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "e2" "locked" "e1" "e3" "e4" "e5" "e0" "admin" "msg1_payload_x" "party_a" "party_b" "msg2_payload_y"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/choreography/contract.py:20
    // self.party_a = GlobalState(
    bytec 9 // "party_a"
    // smart_contracts/choreography/contract.py:21
    // Account("QPYYNP7JTBD37SJUH3RBORS6PSKI2ORRYBAPBNCHC4DAWM2ZM7NIP4JQHI")
    pushbytes base32(QPYYNP7JTBD37SJUH3RBORS6PSKI2ORRYBAPBNCHC4DAWM2ZM7NA) // addr QPYYNP7JTBD37SJUH3RBORS6PSKI2ORRYBAPBNCHC4DAWM2ZM7NIP4JQHI
    // smart_contracts/choreography/contract.py:20-22
    // self.party_a = GlobalState(
    //     Account("QPYYNP7JTBD37SJUH3RBORS6PSKI2ORRYBAPBNCHC4DAWM2ZM7NIP4JQHI")
    // )
    app_global_put
    // smart_contracts/choreography/contract.py:23
    // self.party_b = GlobalState(
    bytec 10 // "party_b"
    // smart_contracts/choreography/contract.py:24
    // Account("QQ7M76IABI2324QA2YCIB6K5HJYDYZOO6OSJREHNOZGFK6PHTKS57FX5TM")
    pushbytes base32(QQ7M76IABI2324QA2YCIB6K5HJYDYZOO6OSJREHNOZGFK6PHTKSQ) // addr QQ7M76IABI2324QA2YCIB6K5HJYDYZOO6OSJREHNOZGFK6PHTKS57FX5TM
    // smart_contracts/choreography/contract.py:23-25
    // self.party_b = GlobalState(
    //     Account("QQ7M76IABI2324QA2YCIB6K5HJYDYZOO6OSJREHNOZGFK6PHTKS57FX5TM")
    // )
    app_global_put
    // smart_contracts/choreography/contract.py:26-27
    // # Edge marking variables
    // self.e0 = GlobalState(UInt64(0))
    bytec 6 // "e0"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:28
    // self.e1 = GlobalState(UInt64(0))
    bytec_2 // "e1"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:29
    // self.e2 = GlobalState(UInt64(0))
    bytec_0 // "e2"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:30
    // self.e3 = GlobalState(UInt64(0))
    bytec_3 // "e3"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:31
    // self.e4 = GlobalState(UInt64(0))
    bytec 4 // "e4"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:32
    // self.e5 = GlobalState(UInt64(0))
    bytec 5 // "e5"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:34-35
    // # Message-specific variables
    // self.msg1_payload_x = GlobalState(UInt64(0))
    bytec 8 // "msg1_payload_x"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:36
    // self.msg2_payload_y = GlobalState(UInt64(0))
    bytec 11 // "msg2_payload_y"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:38-39
    // # Locking variable
    // self.locked = GlobalState(UInt64(0))  # 0 = unlocked, 1 = locked
    bytec_1 // "locked"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/choreography/contract.py:15
    // class simple_BPMN_choreography(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x81de89ee 0xfb562afe 0xd90f9f6b 0x24378d3c 0xccf37f8b // method "task1(uint64)void", method "task2(uint64)void", method "update_global_store()void", method "delete()void", method "execute()uint64"
    txna ApplicationArgs 0
    match main_task1_route@5 main_task2_route@6 main_update_global_store_route@7 main_delete_route@8 main_execute_route@9

main_after_if_else@13:
    // smart_contracts/choreography/contract.py:15
    // class simple_BPMN_choreography(arc4.ARC4Contract):
    intc_0 // 0
    return

main_execute_route@9:
    // smart_contracts/choreography/contract.py:144
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub execute
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_delete_route@8:
    // smart_contracts/choreography/contract.py:126
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete
    intc_1 // 1
    return

main_update_global_store_route@7:
    // smart_contracts/choreography/contract.py:117
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub update_global_store
    intc_1 // 1
    return

main_task2_route@6:
    // smart_contracts/choreography/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/choreography/contract.py:15
    // class simple_BPMN_choreography(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/choreography/contract.py:83
    // @arc4.abimethod
    callsub task2
    intc_1 // 1
    return

main_task1_route@5:
    // smart_contracts/choreography/contract.py:58
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/choreography/contract.py:15
    // class simple_BPMN_choreography(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/choreography/contract.py:58
    // @arc4.abimethod
    callsub task1
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/choreography/contract.py:15
    // class simple_BPMN_choreography(arc4.ARC4Contract):
    intc_0 // 0
    pushint 4 // 4
    txn OnCompletion
    match main_create@11 main_update@12
    b main_after_if_else@13

main_update@12:
    // smart_contracts/choreography/contract.py:111
    // @baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // can only call when not creating
    callsub update
    intc_1 // 1
    return

main_create@11:
    // smart_contracts/choreography/contract.py:41
    // @arc4.baremethod(create="allow")
    callsub create
    intc_1 // 1
    return


// smart_contracts.choreography.contract.simple_BPMN_choreography.create() -> void:
create:
    // smart_contracts/choreography/contract.py:44
    // self.e0.value = UInt64(1)
    bytec 6 // "e0"
    intc_1 // 1
    app_global_put
    // smart_contracts/choreography/contract.py:45
    // self.admin.value = Txn.sender
    bytec 7 // "admin"
    txn Sender
    app_global_put
    // smart_contracts/choreography/contract.py:46
    // self.locked.value = UInt64(0)
    bytec_1 // "locked"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:47
    // log(Bytes(b"Choreography initialized successfully."))
    pushbytes 0x43686f72656f67726170687920696e697469616c697a6564207375636365737366756c6c792e
    log
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.task1(msg1_param_x: uint64) -> void:
task1:
    // smart_contracts/choreography/contract.py:58-59
    // @arc4.abimethod
    // def task1(self, msg1_param_x: UInt64) -> None:
    proto 1 0
    // smart_contracts/choreography/contract.py:60
    // assert self.locked.value == UInt64(0), "Contract is locked"
    intc_0 // 0
    bytec_1 // "locked"
    app_global_get_ex
    assert // check self.locked exists
    !
    assert // Contract is locked
    // smart_contracts/choreography/contract.py:61
    // assert self.e1.value > UInt64(0), "Task 1 not active."
    intc_0 // 0
    bytec_2 // "e1"
    app_global_get_ex
    assert // check self.e1 exists
    assert // Task 1 not active.
    // smart_contracts/choreography/contract.py:62
    // assert Txn.sender == self.party_a.value, "Only A can send msg1"
    txn Sender
    intc_0 // 0
    bytec 9 // "party_a"
    app_global_get_ex
    assert // check self.party_a exists
    ==
    assert // Only A can send msg1
    // smart_contracts/choreography/contract.py:63
    // self.e1.value -= UInt64(1)
    intc_0 // 0
    bytec_2 // "e1"
    app_global_get_ex
    assert // check self.e1 exists
    intc_1 // 1
    -
    bytec_2 // "e1"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:64
    // self.msg1_payload_x.value = msg1_param_x
    bytec 8 // "msg1_payload_x"
    frame_dig -1
    app_global_put
    // smart_contracts/choreography/contract.py:65
    // self.e2.value += UInt64(1)
    intc_0 // 0
    bytec_0 // "e2"
    app_global_get_ex
    assert // check self.e2 exists
    intc_1 // 1
    +
    bytec_0 // "e2"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:66
    // self.execute()
    callsub execute
    pop
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.task2(msg2_param_y: uint64) -> void:
task2:
    // smart_contracts/choreography/contract.py:83-84
    // @arc4.abimethod
    // def task2(self, msg2_param_y: UInt64) -> None:
    proto 1 0
    // smart_contracts/choreography/contract.py:85
    // assert self.locked.value == UInt64(0), "Contract is locked"
    intc_0 // 0
    bytec_1 // "locked"
    app_global_get_ex
    assert // check self.locked exists
    !
    assert // Contract is locked
    // smart_contracts/choreography/contract.py:86
    // assert self.e3.value > UInt64(0), "Task 2 not active."
    intc_0 // 0
    bytec_3 // "e3"
    app_global_get_ex
    assert // check self.e3 exists
    assert // Task 2 not active.
    // smart_contracts/choreography/contract.py:87
    // assert Txn.sender == self.party_b.value, "Only B can send msg2"
    txn Sender
    intc_0 // 0
    bytec 10 // "party_b"
    app_global_get_ex
    assert // check self.party_b exists
    ==
    assert // Only B can send msg2
    // smart_contracts/choreography/contract.py:88
    // self.e3.value -= UInt64(1)
    intc_0 // 0
    bytec_3 // "e3"
    app_global_get_ex
    assert // check self.e3 exists
    intc_1 // 1
    -
    bytec_3 // "e3"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:89
    // self.msg2_payload_y.value = msg2_param_y
    bytec 11 // "msg2_payload_y"
    frame_dig -1
    app_global_put
    // smart_contracts/choreography/contract.py:90
    // self.e4.value += UInt64(1)
    intc_0 // 0
    bytec 4 // "e4"
    app_global_get_ex
    assert // check self.e4 exists
    intc_1 // 1
    +
    bytec 4 // "e4"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:91
    // self.execute()
    callsub execute
    pop
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.update() -> void:
update:
    // smart_contracts/choreography/contract.py:113
    // assert Txn.sender == self.admin.value, "Only admin can update the contract"
    txn Sender
    intc_0 // 0
    bytec 7 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can update the contract
    // smart_contracts/choreography/contract.py:114
    // self.locked.value = UInt64(1)  # Lock the contract
    bytec_1 // "locked"
    intc_1 // 1
    app_global_put
    // smart_contracts/choreography/contract.py:115
    // log(Bytes(b"Contract updated successfully"))
    pushbytes 0x436f6e74726163742075706461746564207375636365737366756c6c79
    log
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.update_global_store() -> void:
update_global_store:
    // smart_contracts/choreography/contract.py:120
    // assert Txn.sender == self.admin.value, "Only admin can update the global store"
    txn Sender
    intc_0 // 0
    bytec 7 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can update the global store
    // smart_contracts/choreography/contract.py:121
    // self.locked.value = UInt64(0)  # Unlock the contract
    bytec_1 // "locked"
    intc_0 // 0
    app_global_put
    // smart_contracts/choreography/contract.py:122-124
    // # self.new_var.value = UInt64(0) # added a new  variable
    // # del self.old_var.value # removed a variable
    // log(Bytes(b"Contract variables updated successfully"))
    pushbytes 0x436f6e7472616374207661726961626c65732075706461746564207375636365737366756c6c79
    log
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.delete() -> void:
delete:
    // smart_contracts/choreography/contract.py:128
    // assert Txn.sender == self.admin.value, "Only admin can delete the contract"
    txn Sender
    intc_0 // 0
    bytec 7 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can delete the contract
    // smart_contracts/choreography/contract.py:129
    // assert self.locked.value == UInt64(0), "Contract is locked"
    intc_0 // 0
    bytec_1 // "locked"
    app_global_get_ex
    assert // check self.locked exists
    !
    assert // Contract is locked
    // smart_contracts/choreography/contract.py:130
    // log(Bytes(b"XRay Choreography contract deleted successfully"))
    pushbytes 0x585261792043686f72656f67726170687920636f6e74726163742064656c65746564207375636365737366756c6c79
    log
    retsub


// smart_contracts.choreography.contract.simple_BPMN_choreography.execute() -> uint64:
execute:
    // smart_contracts/choreography/contract.py:146
    // assert self.locked.value == UInt64(0), "Contract is locked"
    intc_0 // 0
    bytec_1 // "locked"
    app_global_get_ex
    assert // check self.locked exists
    !
    assert // Contract is locked
    // smart_contracts/choreography/contract.py:147
    // executed = True
    intc_1 // 1

execute_while_top@1:
    // smart_contracts/choreography/contract.py:148
    // while executed:
    bz execute_after_while@3
    // smart_contracts/choreography/contract.py:52
    // if self.e0.value > UInt64(0):
    intc_0 // 0
    bytec 6 // "e0"
    app_global_get_ex
    assert // check self.e0 exists
    bz execute_after_if_else@9
    // smart_contracts/choreography/contract.py:53
    // self.e0.value -= UInt64(1)
    intc_0 // 0
    bytec 6 // "e0"
    app_global_get_ex
    assert // check self.e0 exists
    intc_1 // 1
    -
    bytec 6 // "e0"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:54
    // self.e1.value += UInt64(1)
    intc_0 // 0
    bytec_2 // "e1"
    app_global_get_ex
    assert // check self.e1 exists
    intc_1 // 1
    +
    bytec_2 // "e1"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:55
    // return UInt64(1)
    intc_1 // 1

execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.start1@10:
    // smart_contracts/choreography/contract.py:134
    // if self.start1() != UInt64(0):
    bz execute_after_if_else@12
    // smart_contracts/choreography/contract.py:135
    // return UInt64(1)
    intc_1 // 1

execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.execute_one_rule@31:
    // smart_contracts/choreography/contract.py:150
    // executed = rule_executed != UInt64(0)
    intc_0 // 0
    !=
    b execute_while_top@1

execute_after_if_else@12:
    // smart_contracts/choreography/contract.py:71
    // if self.e2.value > UInt64(0):
    intc_0 // 0
    bytec_0 // "e2"
    app_global_get_ex
    assert // check self.e2 exists
    bz execute_after_if_else@17
    // smart_contracts/choreography/contract.py:72
    // if self.msg1_payload_x.value > UInt64(0):
    intc_0 // 0
    bytec 8 // "msg1_payload_x"
    app_global_get_ex
    assert // check self.msg1_payload_x exists
    bz execute_else_body@15
    // smart_contracts/choreography/contract.py:73
    // log(Bytes(b"Branching to task2"))
    pushbytes 0x4272616e6368696e6720746f207461736b32
    log
    // smart_contracts/choreography/contract.py:74
    // self.e2.value -= UInt64(1)
    intc_0 // 0
    bytec_0 // "e2"
    app_global_get_ex
    assert // check self.e2 exists
    intc_1 // 1
    -
    bytec_0 // "e2"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:75
    // self.e3.value += UInt64(1)
    intc_0 // 0
    bytec_3 // "e3"
    app_global_get_ex
    assert // check self.e3 exists
    intc_1 // 1
    +
    bytec_3 // "e3"
    swap
    app_global_put

execute_after_if_else@16:
    // smart_contracts/choreography/contract.py:80
    // return UInt64(1)
    intc_1 // 1

execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.xor1@18:
    // smart_contracts/choreography/contract.py:136
    // if self.xor1() != UInt64(0):
    bz execute_after_if_else@20
    // smart_contracts/choreography/contract.py:137
    // return UInt64(1)
    intc_1 // 1
    // smart_contracts/choreography/contract.py:149
    // rule_executed = self.execute_one_rule()
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.execute_one_rule@31

execute_after_if_else@20:
    // smart_contracts/choreography/contract.py:96
    // if self.e4.value > UInt64(0):
    intc_0 // 0
    bytec 4 // "e4"
    app_global_get_ex
    assert // check self.e4 exists
    bz execute_after_if_else@22
    // smart_contracts/choreography/contract.py:97
    // log(Bytes(b"Process ended via end1"))
    pushbytes 0x50726f6365737320656e6465642076696120656e6431
    log
    // smart_contracts/choreography/contract.py:98
    // self.e4.value -= UInt64(1)
    intc_0 // 0
    bytec 4 // "e4"
    app_global_get_ex
    assert // check self.e4 exists
    intc_1 // 1
    -
    bytec 4 // "e4"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:99
    // return UInt64(1)
    intc_1 // 1

execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.end1@23:
    // smart_contracts/choreography/contract.py:138
    // if self.end1() != UInt64(0):
    bz execute_after_if_else@25
    // smart_contracts/choreography/contract.py:139
    // return UInt64(1)
    intc_1 // 1
    // smart_contracts/choreography/contract.py:149
    // rule_executed = self.execute_one_rule()
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.execute_one_rule@31

execute_after_if_else@25:
    // smart_contracts/choreography/contract.py:105
    // if self.e5.value > UInt64(0):
    intc_0 // 0
    bytec 5 // "e5"
    app_global_get_ex
    assert // check self.e5 exists
    bz execute_after_if_else@27
    // smart_contracts/choreography/contract.py:106
    // log(Bytes(b"Process ended via end2"))
    pushbytes 0x50726f6365737320656e6465642076696120656e6432
    log
    // smart_contracts/choreography/contract.py:107
    // self.e5.value -= UInt64(1)
    intc_0 // 0
    bytec 5 // "e5"
    app_global_get_ex
    assert // check self.e5 exists
    intc_1 // 1
    -
    bytec 5 // "e5"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:108
    // return UInt64(1)
    intc_1 // 1

execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.end2@28:
    // smart_contracts/choreography/contract.py:140
    // if self.end2() != UInt64(0):
    bz execute_after_if_else@30
    // smart_contracts/choreography/contract.py:141
    // return UInt64(1)
    intc_1 // 1
    // smart_contracts/choreography/contract.py:149
    // rule_executed = self.execute_one_rule()
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.execute_one_rule@31

execute_after_if_else@30:
    // smart_contracts/choreography/contract.py:142
    // return UInt64(0)
    intc_0 // 0
    // smart_contracts/choreography/contract.py:149
    // rule_executed = self.execute_one_rule()
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.execute_one_rule@31

execute_after_if_else@27:
    // smart_contracts/choreography/contract.py:109
    // return UInt64(0)
    intc_0 // 0
    // smart_contracts/choreography/contract.py:140
    // if self.end2() != UInt64(0):
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.end2@28

execute_after_if_else@22:
    // smart_contracts/choreography/contract.py:100
    // return UInt64(0)
    intc_0 // 0
    // smart_contracts/choreography/contract.py:138
    // if self.end1() != UInt64(0):
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.end1@23

execute_else_body@15:
    // smart_contracts/choreography/contract.py:77
    // log(Bytes(b"Branching to end2"))
    pushbytes 0x4272616e6368696e6720746f20656e6432
    log
    // smart_contracts/choreography/contract.py:78
    // self.e2.value -= UInt64(1)
    intc_0 // 0
    bytec_0 // "e2"
    app_global_get_ex
    assert // check self.e2 exists
    intc_1 // 1
    -
    bytec_0 // "e2"
    swap
    app_global_put
    // smart_contracts/choreography/contract.py:79
    // self.e5.value += UInt64(1)
    intc_0 // 0
    bytec 5 // "e5"
    app_global_get_ex
    assert // check self.e5 exists
    intc_1 // 1
    +
    bytec 5 // "e5"
    swap
    app_global_put
    b execute_after_if_else@16

execute_after_if_else@17:
    // smart_contracts/choreography/contract.py:81
    // return UInt64(0)
    intc_0 // 0
    // smart_contracts/choreography/contract.py:136
    // if self.xor1() != UInt64(0):
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.xor1@18

execute_after_if_else@9:
    // smart_contracts/choreography/contract.py:56
    // return UInt64(0)
    intc_0 // 0
    // smart_contracts/choreography/contract.py:134
    // if self.start1() != UInt64(0):
    b execute_after_inlined_smart_contracts.choreography.contract.simple_BPMN_choreography.start1@10

execute_after_while@3:
    // smart_contracts/choreography/contract.py:153
    // self.e0.value
    intc_0 // 0
    bytec 6 // "e0"
    app_global_get_ex
    assert // check self.e0 exists
    // smart_contracts/choreography/contract.py:154
    // + self.e1.value
    intc_0 // 0
    bytec_2 // "e1"
    app_global_get_ex
    assert // check self.e1 exists
    // smart_contracts/choreography/contract.py:153-154
    // self.e0.value
    // + self.e1.value
    +
    // smart_contracts/choreography/contract.py:155
    // + self.e2.value
    intc_0 // 0
    bytec_0 // "e2"
    app_global_get_ex
    assert // check self.e2 exists
    // smart_contracts/choreography/contract.py:153-155
    // self.e0.value
    // + self.e1.value
    // + self.e2.value
    +
    // smart_contracts/choreography/contract.py:156
    // + self.e3.value
    intc_0 // 0
    bytec_3 // "e3"
    app_global_get_ex
    assert // check self.e3 exists
    // smart_contracts/choreography/contract.py:153-156
    // self.e0.value
    // + self.e1.value
    // + self.e2.value
    // + self.e3.value
    +
    // smart_contracts/choreography/contract.py:157
    // + self.e4.value
    intc_0 // 0
    bytec 4 // "e4"
    app_global_get_ex
    assert // check self.e4 exists
    // smart_contracts/choreography/contract.py:153-157
    // self.e0.value
    // + self.e1.value
    // + self.e2.value
    // + self.e3.value
    // + self.e4.value
    +
    // smart_contracts/choreography/contract.py:158
    // + self.e5.value
    intc_0 // 0
    bytec 5 // "e5"
    app_global_get_ex
    assert // check self.e5 exists
    // smart_contracts/choreography/contract.py:153-158
    // self.e0.value
    // + self.e1.value
    // + self.e2.value
    // + self.e3.value
    // + self.e4.value
    // + self.e5.value
    +
    // smart_contracts/choreography/contract.py:152-160
    // if (
    //     self.e0.value
    //     + self.e1.value
    //     + self.e2.value
    //     + self.e3.value
    //     + self.e4.value
    //     + self.e5.value
    //     > UInt64(0)
    // ):
    bz execute_else_body@5
    // smart_contracts/choreography/contract.py:161
    // log(Bytes(b"The process instance is RUNNING"))
    pushbytes 0x5468652070726f6365737320696e7374616e63652069732052554e4e494e47
    log

execute_after_if_else@6:
    // smart_contracts/choreography/contract.py:164
    // return UInt64(1)
    intc_1 // 1
    retsub

execute_else_body@5:
    // smart_contracts/choreography/contract.py:163
    // log(Bytes(b"The process instance is COMPLETED"))
    pushbytes 0x5468652070726f6365737320696e7374616e636520697320434f4d504c45544544
    log
    b execute_after_if_else@6
