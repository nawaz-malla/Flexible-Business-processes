# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": ["NoOp", "UpdateApplication"], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "msg1_param_x"}], "name": "task1", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "msg2_param_y"}], "name": "task2", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "update_global_store", "returns": {"type": "void"}, "desc": "Update the global store.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "delete", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "execute", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}], "name": "simple_BPMN_choreography", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "address"}, "party_a": {"key": "cGFydHlfYQ==", "keyType": "AVMString", "valueType": "address"}, "party_b": {"key": "cGFydHlfYg==", "keyType": "AVMString", "valueType": "address"}, "e0": {"key": "ZTA=", "keyType": "AVMString", "valueType": "AVMUint64"}, "e1": {"key": "ZTE=", "keyType": "AVMString", "valueType": "AVMUint64"}, "e2": {"key": "ZTI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "e3": {"key": "ZTM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "e4": {"key": "ZTQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "e5": {"key": "ZTU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "msg1_payload_x": {"key": "bXNnMV9wYXlsb2FkX3g=", "keyType": "AVMString", "valueType": "AVMUint64"}, "msg2_payload_y": {"key": "bXNnMl9wYXlsb2FkX3k=", "keyType": "AVMString", "valueType": "AVMUint64"}, "locked": {"key": "bG9ja2Vk", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 9}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiACAAEmDAJlMgZsb2NrZWQCZTECZTMCZTQCZTUCZTAFYWRtaW4ObXNnMV9wYXlsb2FkX3gHcGFydHlfYQdwYXJ0eV9iDm1zZzJfcGF5bG9hZF95MRhAAGonCYAgg/GGv+mYR7/JND7iF0ZefJSNOjHAQPC0RxcGCzNZZ9pnJwqAIIQ+z/kACjW9cgDWBID5XTpwPGXO86SYkO12TFV555qlZycGImcqImcoImcrImcnBCJnJwUiZycIImcnCyJnKSJnMRtBAHyCBQSB3onuBPtWKv4E2Q+fawQkN408BMzzf4s2GgCOBQBCADIAJgAYAAIiQzEZFEQxGESIAaUWgAQVH3x1TFCwI0MxGYEFEkQxGESIAUsjQzEZFEQxGESIAQgjQzEZFEQxGEQ2GgEXiACWI0MxGRREMRhENhoBF4gAUyNDIoEEMRmOAgALAANC/6AxGESIAKUjQ4gAAiNDJwYjZycHMQBnKSJngCZDaG9yZW9ncmFwaHkgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LrCJigEAIillRBREIiplREQxACInCWVEEkQiKmVEIwkqTGcnCIv/ZyIoZUQjCChMZ4gA3UiJigEAIillRBREIitlREQxACInCmVEEkQiK2VEIwkrTGcnC4v/ZyInBGVEIwgnBExniACoSIkxACInB2VEEkQpI2eAHUNvbnRyYWN0IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5sIkxACInB2VEEkQpImeAJ0NvbnRyYWN0IHZhcmlhYmxlcyB1cGRhdGVkIHN1Y2Nlc3NmdWxsebCJMQAiJwdlRBJEIillRBREgC9YUmF5IENob3Jlb2dyYXBoeSBjb250cmFjdCBkZWxldGVkIHN1Y2Nlc3NmdWxsebCJIillRBREI0EBCyInBmVEQQD/IicGZUQjCScGTGciKmVEIwgqTGcjQQAGIyITQv/XIihlREEA1iInCGVEQQCjgBJCcmFuY2hpbmcgdG8gdGFzazKwIihlRCMJKExnIitlRCMIK0xnI0EABCNC/70iJwRlREEAaIAWUHJvY2VzcyBlbmRlZCB2aWEgZW5kMbAiJwRlRCMJJwRMZyNBAAQjQv+JIicFZURBADCAFlByb2Nlc3MgZW5kZWQgdmlhIGVuZDKwIicFZUQjCScFTGcjQQAEI0L/VSJC/1EiQv/xIkL/uYARQnJhbmNoaW5nIHRvIGVuZDKwIihlRCMJKExnIicFZUQjCCcFTGdC/1kiQv9WIkL/EiInBmVEIiplRAgiKGVECCIrZUQIIicEZUQIIicFZUQIQQAkgB9UaGUgcHJvY2VzcyBpbnN0YW5jZSBpcyBSVU5OSU5HsCOJgCFUaGUgcHJvY2VzcyBpbnN0YW5jZSBpcyBDT01QTEVURUSwQv/X", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 7, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [413, 464, 623, 680], "errorMessage": "Contract is locked"}, {"pc": [271], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [247, 283, 295, 311], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [427], "errorMessage": "Only A can send msg1"}, {"pc": [478], "errorMessage": "Only B can send msg2"}, {"pc": [617], "errorMessage": "Only admin can delete the contract"}, {"pc": [517], "errorMessage": "Only admin can update the contract"}, {"pc": [562], "errorMessage": "Only admin can update the global store"}, {"pc": [418], "errorMessage": "Task 1 not active."}, {"pc": [469], "errorMessage": "Task 2 not active."}, {"pc": [250, 274, 286, 298, 314, 340], "errorMessage": "can only call when not creating"}, {"pc": [515, 560, 615], "errorMessage": "check self.admin exists"}, {"pc": [689, 697, 956], "errorMessage": "check self.e0 exists"}, {"pc": [417, 431, 707, 960], "errorMessage": "check self.e1 exists"}, {"pc": [445, 726, 762, 924, 965], "errorMessage": "check self.e2 exists"}, {"pc": [468, 482, 771, 970], "errorMessage": "check self.e3 exists"}, {"pc": [497, 789, 822, 976], "errorMessage": "check self.e4 exists"}, {"pc": [841, 874, 934, 982], "errorMessage": "check self.e5 exists"}, {"pc": [411, 462, 621, 678], "errorMessage": "check self.locked exists"}, {"pc": [734], "errorMessage": "check self.msg1_payload_x exists"}, {"pc": [425], "errorMessage": "check self.party_a exists"}, {"pc": [476], "errorMessage": "check self.party_b exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class Task1Args:
    """Dataclass for task1 arguments"""
    msg1_param_x: int

    @property
    def abi_method_signature(self) -> str:
        return "task1(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class Task2Args:
    """Dataclass for task2 arguments"""
    msg2_param_y: int

    @property
    def abi_method_signature(self) -> str:
        return "task2(uint64)void"


class _SimpleBpmnChoreographyUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self, params: algokit_utils.AppClientBareCallParams | None = None
    ) -> algokit_utils.AppUpdateParams:
        return self.app_client.params.bare.update(params)


class _SimpleBpmnChoreographyDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }))


class SimpleBpmnChoreographyParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SimpleBpmnChoreographyUpdate":
        return _SimpleBpmnChoreographyUpdate(self.app_client)

    @property
    def delete(self) -> "_SimpleBpmnChoreographyDelete":
        return _SimpleBpmnChoreographyDelete(self.app_client)

    def task1(
        self,
        args: tuple[int] | Task1Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task1(uint64)void",
            "args": method_args,
        }))

    def task2(
        self,
        args: tuple[int] | Task2Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task2(uint64)void",
            "args": method_args,
        }))

    def update_global_store(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global_store()void",
        }))

    def execute(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _SimpleBpmnChoreographyUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(self, params: algokit_utils.AppClientBareCallParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class _SimpleBpmnChoreographyDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }))


class SimpleBpmnChoreographyCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SimpleBpmnChoreographyUpdateTransaction":
        return _SimpleBpmnChoreographyUpdateTransaction(self.app_client)

    @property
    def delete(self) -> "_SimpleBpmnChoreographyDeleteTransaction":
        return _SimpleBpmnChoreographyDeleteTransaction(self.app_client)

    def task1(
        self,
        args: tuple[int] | Task1Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task1(uint64)void",
            "args": method_args,
        }))

    def task2(
        self,
        args: tuple[int] | Task2Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task2(uint64)void",
            "args": method_args,
        }))

    def update_global_store(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global_store()void",
        }))

    def execute(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _SimpleBpmnChoreographyUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult:
        return self.app_client.send.bare.update(
            params=params,
            send_params=send_params,
            compilation_params=compilation_params
        )


class _SimpleBpmnChoreographyDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class SimpleBpmnChoreographySend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_SimpleBpmnChoreographyUpdateSend":
        return _SimpleBpmnChoreographyUpdateSend(self.app_client)

    @property
    def delete(self) -> "_SimpleBpmnChoreographyDeleteSend":
        return _SimpleBpmnChoreographyDeleteSend(self.app_client)

    def task1(
        self,
        args: tuple[int] | Task1Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task1(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def task2(
        self,
        args: tuple[int] | Task2Args,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "task2(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_global_store(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global_store()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def execute(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "execute()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: str
    party_a: str
    party_b: str
    e0: int
    e1: int
    e2: int
    e3: int
    e4: int
    e5: int
    msg1_payload_x: int
    msg2_payload_y: int
    locked: int

class SimpleBpmnChoreographyState:
    """Methods to access state for the current simple_BPMN_choreography app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> str:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def party_a(self) -> str:
        """Get the current value of the party_a key in global_state state"""
        value = self.app_client.state.global_state.get_value("party_a")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def party_b(self) -> str:
        """Get the current value of the party_b key in global_state state"""
        value = self.app_client.state.global_state.get_value("party_b")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def e0(self) -> int:
        """Get the current value of the e0 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e0")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def e1(self) -> int:
        """Get the current value of the e1 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e1")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def e2(self) -> int:
        """Get the current value of the e2 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e2")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def e3(self) -> int:
        """Get the current value of the e3 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e3")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def e4(self) -> int:
        """Get the current value of the e4 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e4")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def e5(self) -> int:
        """Get the current value of the e5 key in global_state state"""
        value = self.app_client.state.global_state.get_value("e5")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def msg1_payload_x(self) -> int:
        """Get the current value of the msg1_payload_x key in global_state state"""
        value = self.app_client.state.global_state.get_value("msg1_payload_x")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def msg2_payload_y(self) -> int:
        """Get the current value of the msg2_payload_y key in global_state state"""
        value = self.app_client.state.global_state.get_value("msg2_payload_y")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def locked(self) -> int:
        """Get the current value of the locked key in global_state state"""
        value = self.app_client.state.global_state.get_value("locked")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class SimpleBpmnChoreographyClient:
    """Client for interacting with simple_BPMN_choreography smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SimpleBpmnChoreographyParams(self.app_client)
        self.create_transaction = SimpleBpmnChoreographyCreateTransactionParams(self.app_client)
        self.send = SimpleBpmnChoreographySend(self.app_client)
        self.state = SimpleBpmnChoreographyState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SimpleBpmnChoreographyClient":
        return SimpleBpmnChoreographyClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleBpmnChoreographyClient":
        return SimpleBpmnChoreographyClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SimpleBpmnChoreographyClient":
        return SimpleBpmnChoreographyClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SimpleBpmnChoreographyComposer":
        return SimpleBpmnChoreographyComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["task1(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["task2(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_global_store()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["execute()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SimpleBpmnChoreographyBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating SimpleBpmnChoreography contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class SimpleBpmnChoreographyBareCallUpdateParams(algokit_utils.AppClientBareCallParams):
    """Parameters for calling SimpleBpmnChoreography contract with bare calls"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallParams:
        return algokit_utils.AppClientBareCallParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class SimpleBpmnChoreographyMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling SimpleBpmnChoreography contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class SimpleBpmnChoreographyFactory(algokit_utils.TypedAppFactoryProtocol[SimpleBpmnChoreographyBareCallCreateParams, SimpleBpmnChoreographyBareCallUpdateParams, SimpleBpmnChoreographyMethodCallDeleteParams]):
    """Factory for deploying and managing SimpleBpmnChoreographyClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SimpleBpmnChoreographyFactoryParams(self.app_factory)
        self.create_transaction = SimpleBpmnChoreographyFactoryCreateTransaction(self.app_factory)
        self.send = SimpleBpmnChoreographyFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SimpleBpmnChoreographyBareCallCreateParams | None = None,
        update_params: SimpleBpmnChoreographyBareCallUpdateParams | None = None,
        delete_params: SimpleBpmnChoreographyMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SimpleBpmnChoreographyClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SimpleBpmnChoreographyClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleBpmnChoreographyClient:
        """Get an app client by creator address and name"""
        return SimpleBpmnChoreographyClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SimpleBpmnChoreographyClient:
        """Get an app client by app ID"""
        return SimpleBpmnChoreographyClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SimpleBpmnChoreographyFactoryParams:
    """Parameters for creating transactions for SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleBpmnChoreographyFactoryCreateParams(app_factory)
        self.update = SimpleBpmnChoreographyFactoryUpdateParams(app_factory)
        self.delete = SimpleBpmnChoreographyFactoryDeleteParams(app_factory)

class SimpleBpmnChoreographyFactoryCreateParams:
    """Parameters for 'create' operations of SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def task1(
        self,
        args: tuple[int] | Task1Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the task1(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "task1(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def task2(
        self,
        args: tuple[int] | Task2Args,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the task2(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "task2(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_global_store(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_global_store()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_global_store()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def execute(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the execute()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "execute()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def delete(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class SimpleBpmnChoreographyFactoryUpdateParams:
    """Parameters for 'update' operations of SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SimpleBpmnChoreographyFactoryDeleteParams:
    """Parameters for 'delete' operations of SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SimpleBpmnChoreographyFactoryCreateTransaction:
    """Create transactions for SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleBpmnChoreographyFactoryCreateTransactionCreate(app_factory)


class SimpleBpmnChoreographyFactoryCreateTransactionCreate:
    """Create new instances of SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SimpleBpmnChoreographyFactorySend:
    """Send calls to SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SimpleBpmnChoreographyFactorySendCreate(app_factory)


class SimpleBpmnChoreographyFactorySendCreate:
    """Send create calls to SimpleBpmnChoreography contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SimpleBpmnChoreographyClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SimpleBpmnChoreographyClient(result[0]), result[1]


class _SimpleBpmnChoreographyUpdateComposer:
    def __init__(self, composer: "SimpleBpmnChoreographyComposer"):
        self.composer = composer


class _SimpleBpmnChoreographyDeleteComposer:
    def __init__(self, composer: "SimpleBpmnChoreographyComposer"):
        self.composer = composer
    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.delete(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "delete()void", v
            )
        )
        return self.composer


class SimpleBpmnChoreographyComposer:
    """Composer for creating transaction groups for SimpleBpmnChoreography contract calls"""

    def __init__(self, client: "SimpleBpmnChoreographyClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_SimpleBpmnChoreographyUpdateComposer":
        return _SimpleBpmnChoreographyUpdateComposer(self)

    @property
    def delete(self) -> "_SimpleBpmnChoreographyDeleteComposer":
        return _SimpleBpmnChoreographyDeleteComposer(self)

    def task1(
        self,
        args: tuple[int] | Task1Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.task1(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "task1(uint64)void", v
            )
        )
        return self

    def task2(
        self,
        args: tuple[int] | Task2Args,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.task2(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "task2(uint64)void", v
            )
        )
        return self

    def update_global_store(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_global_store(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_global_store()void", v
            )
        )
        return self

    def execute(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.execute(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "execute()uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SimpleBpmnChoreographyComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SimpleBpmnChoreographyComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
