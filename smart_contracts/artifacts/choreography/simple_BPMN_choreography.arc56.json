{
    "name": "simple_BPMN_choreography",
    "structs": {},
    "methods": [
        {
            "name": "task1",
            "args": [
                {
                    "type": "uint64",
                    "name": "msg1_param_x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "task2",
            "args": [
                {
                    "type": "uint64",
                    "name": "msg2_param_y"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_global_store",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the global store.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "execute",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 9,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "party_a": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cGFydHlfYQ=="
                },
                "party_b": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cGFydHlfYg=="
                },
                "e0": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTA="
                },
                "e1": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTE="
                },
                "e2": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTI="
                },
                "e3": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTM="
                },
                "e4": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTQ="
                },
                "e5": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZTU="
                },
                "msg1_payload_x": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bXNnMV9wYXlsb2FkX3g="
                },
                "msg2_payload_y": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bXNnMl9wYXlsb2FkX3k="
                },
                "locked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9ja2Vk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "NoOp",
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        413,
                        464,
                        623,
                        680
                    ],
                    "errorMessage": "Contract is locked"
                },
                {
                    "pc": [
                        271
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        247,
                        283,
                        295,
                        311
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        427
                    ],
                    "errorMessage": "Only A can send msg1"
                },
                {
                    "pc": [
                        478
                    ],
                    "errorMessage": "Only B can send msg2"
                },
                {
                    "pc": [
                        617
                    ],
                    "errorMessage": "Only admin can delete the contract"
                },
                {
                    "pc": [
                        517
                    ],
                    "errorMessage": "Only admin can update the contract"
                },
                {
                    "pc": [
                        562
                    ],
                    "errorMessage": "Only admin can update the global store"
                },
                {
                    "pc": [
                        418
                    ],
                    "errorMessage": "Task 1 not active."
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "Task 2 not active."
                },
                {
                    "pc": [
                        250,
                        274,
                        286,
                        298,
                        314,
                        340
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        515,
                        560,
                        615
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        689,
                        697,
                        956
                    ],
                    "errorMessage": "check self.e0 exists"
                },
                {
                    "pc": [
                        417,
                        431,
                        707,
                        960
                    ],
                    "errorMessage": "check self.e1 exists"
                },
                {
                    "pc": [
                        445,
                        726,
                        762,
                        924,
                        965
                    ],
                    "errorMessage": "check self.e2 exists"
                },
                {
                    "pc": [
                        468,
                        482,
                        771,
                        970
                    ],
                    "errorMessage": "check self.e3 exists"
                },
                {
                    "pc": [
                        497,
                        789,
                        822,
                        976
                    ],
                    "errorMessage": "check self.e4 exists"
                },
                {
                    "pc": [
                        841,
                        874,
                        934,
                        982
                    ],
                    "errorMessage": "check self.e5 exists"
                },
                {
                    "pc": [
                        411,
                        462,
                        621,
                        678
                    ],
                    "errorMessage": "check self.locked exists"
                },
                {
                    "pc": [
                        734
                    ],
                    "errorMessage": "check self.msg1_payload_x exists"
                },
                {
                    "pc": [
                        425
                    ],
                    "errorMessage": "check self.party_a exists"
                },
                {
                    "pc": [
                        476
                    ],
                    "errorMessage": "check self.party_b exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgImUyIiAibG9ja2VkIiAiZTEiICJlMyIgImU0IiAiZTUiICJlMCIgImFkbWluIiAibXNnMV9wYXlsb2FkX3giICJwYXJ0eV9hIiAicGFydHlfYiIgIm1zZzJfcGF5bG9hZF95IgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToyMAogICAgLy8gc2VsZi5wYXJ0eV9hID0gR2xvYmFsU3RhdGUoCiAgICBieXRlYyA5IC8vICJwYXJ0eV9hIgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToyMQogICAgLy8gQWNjb3VudCgiUVBZWU5QN0pUQkQzN1NKVUgzUkJPUlM2UFNLSTJPUlJZQkFQQk5DSEM0REFXTTJaTTdOSVA0SlFISSIpCiAgICBwdXNoYnl0ZXMgYmFzZTMyKFFQWVlOUDdKVEJEMzdTSlVIM1JCT1JTNlBTS0kyT1JSWUJBUEJOQ0hDNERBV00yWk03TkEpIC8vIGFkZHIgUVBZWU5QN0pUQkQzN1NKVUgzUkJPUlM2UFNLSTJPUlJZQkFQQk5DSEM0REFXTTJaTTdOSVA0SlFISQogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToyMC0yMgogICAgLy8gc2VsZi5wYXJ0eV9hID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgQWNjb3VudCgiUVBZWU5QN0pUQkQzN1NKVUgzUkJPUlM2UFNLSTJPUlJZQkFQQk5DSEM0REFXTTJaTTdOSVA0SlFISSIpCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToyMwogICAgLy8gc2VsZi5wYXJ0eV9iID0gR2xvYmFsU3RhdGUoCiAgICBieXRlYyAxMCAvLyAicGFydHlfYiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MjQKICAgIC8vIEFjY291bnQoIlFRN003NklBQkkyMzI0UUEyWUNJQjZLNUhKWURZWk9PNk9TSlJFSE5PWkdGSzZQSFRLUzU3Rlg1VE0iKQogICAgcHVzaGJ5dGVzIGJhc2UzMihRUTdNNzZJQUJJMjMyNFFBMllDSUI2SzVISllEWVpPTzZPU0pSRUhOT1pHRks2UEhUS1NRKSAvLyBhZGRyIFFRN003NklBQkkyMzI0UUEyWUNJQjZLNUhKWURZWk9PNk9TSlJFSE5PWkdGSzZQSFRLUzU3Rlg1VE0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MjMtMjUKICAgIC8vIHNlbGYucGFydHlfYiA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIEFjY291bnQoIlFRN003NklBQkkyMzI0UUEyWUNJQjZLNUhKWURZWk9PNk9TSlJFSE5PWkdGSzZQSFRLUzU3Rlg1VE0iKQogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MjYtMjcKICAgIC8vICMgRWRnZSBtYXJraW5nIHZhcmlhYmxlcwogICAgLy8gc2VsZi5lMCA9IEdsb2JhbFN0YXRlKFVJbnQ2NCgwKSkKICAgIGJ5dGVjIDYgLy8gImUwIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjI4CiAgICAvLyBzZWxmLmUxID0gR2xvYmFsU3RhdGUoVUludDY0KDApKQogICAgYnl0ZWNfMiAvLyAiZTEiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MjkKICAgIC8vIHNlbGYuZTIgPSBHbG9iYWxTdGF0ZShVSW50NjQoMCkpCiAgICBieXRlY18wIC8vICJlMiIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTozMAogICAgLy8gc2VsZi5lMyA9IEdsb2JhbFN0YXRlKFVJbnQ2NCgwKSkKICAgIGJ5dGVjXzMgLy8gImUzIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjMxCiAgICAvLyBzZWxmLmU0ID0gR2xvYmFsU3RhdGUoVUludDY0KDApKQogICAgYnl0ZWMgNCAvLyAiZTQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MzIKICAgIC8vIHNlbGYuZTUgPSBHbG9iYWxTdGF0ZShVSW50NjQoMCkpCiAgICBieXRlYyA1IC8vICJlNSIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTozNC0zNQogICAgLy8gIyBNZXNzYWdlLXNwZWNpZmljIHZhcmlhYmxlcwogICAgLy8gc2VsZi5tc2cxX3BheWxvYWRfeCA9IEdsb2JhbFN0YXRlKFVJbnQ2NCgwKSkKICAgIGJ5dGVjIDggLy8gIm1zZzFfcGF5bG9hZF94IgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjM2CiAgICAvLyBzZWxmLm1zZzJfcGF5bG9hZF95ID0gR2xvYmFsU3RhdGUoVUludDY0KDApKQogICAgYnl0ZWMgMTEgLy8gIm1zZzJfcGF5bG9hZF95IgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjM4LTM5CiAgICAvLyAjIExvY2tpbmcgdmFyaWFibGUKICAgIC8vIHNlbGYubG9ja2VkID0gR2xvYmFsU3RhdGUoVUludDY0KDApKSAgIyAwID0gdW5sb2NrZWQsIDEgPSBsb2NrZWQKICAgIGJ5dGVjXzEgLy8gImxvY2tlZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1CiAgICAvLyBjbGFzcyBzaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDEwCiAgICBwdXNoYnl0ZXNzIDB4ODFkZTg5ZWUgMHhmYjU2MmFmZSAweGQ5MGY5ZjZiIDB4MjQzNzhkM2MgMHhjY2YzN2Y4YiAvLyBtZXRob2QgInRhc2sxKHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJ0YXNrMih1aW50NjQpdm9pZCIsIG1ldGhvZCAidXBkYXRlX2dsb2JhbF9zdG9yZSgpdm9pZCIsIG1ldGhvZCAiZGVsZXRlKCl2b2lkIiwgbWV0aG9kICJleGVjdXRlKCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3Rhc2sxX3JvdXRlQDUgbWFpbl90YXNrMl9yb3V0ZUA2IG1haW5fdXBkYXRlX2dsb2JhbF9zdG9yZV9yb3V0ZUA3IG1haW5fZGVsZXRlX3JvdXRlQDggbWFpbl9leGVjdXRlX3JvdXRlQDkKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTUKICAgIC8vIGNsYXNzIHNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeShhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2V4ZWN1dGVfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTQ0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBleGVjdXRlCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZGVsZXRlX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjEyNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWxldGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX2dsb2JhbF9zdG9yZV9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVwZGF0ZV9nbG9iYWxfc3RvcmUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdGFzazJfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6ODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1CiAgICAvLyBjbGFzcyBzaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo4MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHRhc2syCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Rhc2sxX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjU4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNQogICAgLy8gY2xhc3Mgc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiB0YXNrMQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1CiAgICAvLyBjbGFzcyBzaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHB1c2hpbnQgNCAvLyA0CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBtYXRjaCBtYWluX2NyZWF0ZUAxMSBtYWluX3VwZGF0ZUAxMgogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMTMKCm1haW5fdXBkYXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMTEKICAgIC8vIEBiYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVwZGF0ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjQxCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0iYWxsb3ciKQogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5jcmVhdGUoKSAtPiB2b2lkOgpjcmVhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBzZWxmLmUwLnZhbHVlID0gVUludDY0KDEpCiAgICBieXRlYyA2IC8vICJlMCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo0NQogICAgLy8gc2VsZi5hZG1pbi52YWx1ZSA9IFR4bi5zZW5kZXIKICAgIGJ5dGVjIDcgLy8gImFkbWluIgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NDYKICAgIC8vIHNlbGYubG9ja2VkLnZhbHVlID0gVUludDY0KDApCiAgICBieXRlY18xIC8vICJsb2NrZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NDcKICAgIC8vIGxvZyhCeXRlcyhiIkNob3Jlb2dyYXBoeSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHkuIikpCiAgICBwdXNoYnl0ZXMgMHg0MzY4NmY3MjY1NmY2NzcyNjE3MDY4NzkyMDY5NmU2OTc0Njk2MTZjNjk3YTY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OTJlCiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LnRhc2sxKG1zZzFfcGFyYW1feDogdWludDY0KSAtPiB2b2lkOgp0YXNrMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NTgtNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHRhc2sxKHNlbGYsIG1zZzFfcGFyYW1feDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjYwCiAgICAvLyBhc3NlcnQgc2VsZi5sb2NrZWQudmFsdWUgPT0gVUludDY0KDApLCAiQ29udHJhY3QgaXMgbG9ja2VkIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImxvY2tlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5sb2NrZWQgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gQ29udHJhY3QgaXMgbG9ja2VkCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhc3NlcnQgc2VsZi5lMS52YWx1ZSA+IFVJbnQ2NCgwKSwgIlRhc2sgMSBub3QgYWN0aXZlLiIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJlMSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMSBleGlzdHMKICAgIGFzc2VydCAvLyBUYXNrIDEgbm90IGFjdGl2ZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NjIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYucGFydHlfYS52YWx1ZSwgIk9ubHkgQSBjYW4gc2VuZCBtc2cxIgogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gInBhcnR5X2EiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGFydHlfYSBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBBIGNhbiBzZW5kIG1zZzEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NjMKICAgIC8vIHNlbGYuZTEudmFsdWUgLT0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiZTEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTEgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWNfMiAvLyAiZTEiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo2NAogICAgLy8gc2VsZi5tc2cxX3BheWxvYWRfeC52YWx1ZSA9IG1zZzFfcGFyYW1feAogICAgYnl0ZWMgOCAvLyAibXNnMV9wYXlsb2FkX3giCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjY1CiAgICAvLyBzZWxmLmUyLnZhbHVlICs9IFVJbnQ2NCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImUyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmUyIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjXzAgLy8gImUyIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NjYKICAgIC8vIHNlbGYuZXhlY3V0ZSgpCiAgICBjYWxsc3ViIGV4ZWN1dGUKICAgIHBvcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmNob3Jlb2dyYXBoeS5jb250cmFjdC5zaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkudGFzazIobXNnMl9wYXJhbV95OiB1aW50NjQpIC0+IHZvaWQ6CnRhc2syOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo4My04NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgdGFzazIoc2VsZiwgbXNnMl9wYXJhbV95OiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6ODUKICAgIC8vIGFzc2VydCBzZWxmLmxvY2tlZC52YWx1ZSA9PSBVSW50NjQoMCksICJDb250cmFjdCBpcyBsb2NrZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibG9ja2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2tlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBDb250cmFjdCBpcyBsb2NrZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6ODYKICAgIC8vIGFzc2VydCBzZWxmLmUzLnZhbHVlID4gVUludDY0KDApLCAiVGFzayAyIG5vdCBhY3RpdmUuIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImUzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmUzIGV4aXN0cwogICAgYXNzZXJ0IC8vIFRhc2sgMiBub3QgYWN0aXZlLgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo4NwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5wYXJ0eV9iLnZhbHVlLCAiT25seSBCIGNhbiBzZW5kIG1zZzIiCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gInBhcnR5X2IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGFydHlfYiBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBCIGNhbiBzZW5kIG1zZzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6ODgKICAgIC8vIHNlbGYuZTMudmFsdWUgLT0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZTMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTMgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWNfMyAvLyAiZTMiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5tc2cyX3BheWxvYWRfeS52YWx1ZSA9IG1zZzJfcGFyYW1feQogICAgYnl0ZWMgMTEgLy8gIm1zZzJfcGF5bG9hZF95IgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5lNC52YWx1ZSArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJlNCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lNCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlYyA0IC8vICJlNCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLmV4ZWN1dGUoKQogICAgY2FsbHN1YiBleGVjdXRlCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LnVwZGF0ZSgpIC0+IHZvaWQ6CnVwZGF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTEzCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiBjYW4gdXBkYXRlIHRoZSBjb250cmFjdCIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbiBjYW4gdXBkYXRlIHRoZSBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMTQKICAgIC8vIHNlbGYubG9ja2VkLnZhbHVlID0gVUludDY0KDEpICAjIExvY2sgdGhlIGNvbnRyYWN0CiAgICBieXRlY18xIC8vICJsb2NrZWQiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTE1CiAgICAvLyBsb2coQnl0ZXMoYiJDb250cmFjdCB1cGRhdGVkIHN1Y2Nlc3NmdWxseSIpKQogICAgcHVzaGJ5dGVzIDB4NDM2ZjZlNzQ3MjYxNjM3NDIwNzU3MDY0NjE3NDY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS51cGRhdGVfZ2xvYmFsX3N0b3JlKCkgLT4gdm9pZDoKdXBkYXRlX2dsb2JhbF9zdG9yZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTIwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiBjYW4gdXBkYXRlIHRoZSBnbG9iYWwgc3RvcmUiCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiYWRtaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW4gZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgYWRtaW4gY2FuIHVwZGF0ZSB0aGUgZ2xvYmFsIHN0b3JlCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjEyMQogICAgLy8gc2VsZi5sb2NrZWQudmFsdWUgPSBVSW50NjQoMCkgICMgVW5sb2NrIHRoZSBjb250cmFjdAogICAgYnl0ZWNfMSAvLyAibG9ja2VkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjEyMi0xMjQKICAgIC8vICMgc2VsZi5uZXdfdmFyLnZhbHVlID0gVUludDY0KDApICMgYWRkZWQgYSBuZXcgIHZhcmlhYmxlCiAgICAvLyAjIGRlbCBzZWxmLm9sZF92YXIudmFsdWUgIyByZW1vdmVkIGEgdmFyaWFibGUKICAgIC8vIGxvZyhCeXRlcyhiIkNvbnRyYWN0IHZhcmlhYmxlcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseSIpKQogICAgcHVzaGJ5dGVzIDB4NDM2ZjZlNzQ3MjYxNjM3NDIwNzY2MTcyNjk2MTYyNmM2NTczMjA3NTcwNjQ2MTc0NjU2NDIwNzM3NTYzNjM2NTczNzM2Njc1NmM2Yzc5CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LmRlbGV0ZSgpIC0+IHZvaWQ6CmRlbGV0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTI4CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiBjYW4gZGVsZXRlIHRoZSBjb250cmFjdCIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbiBjYW4gZGVsZXRlIHRoZSBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMjkKICAgIC8vIGFzc2VydCBzZWxmLmxvY2tlZC52YWx1ZSA9PSBVSW50NjQoMCksICJDb250cmFjdCBpcyBsb2NrZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibG9ja2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2tlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBDb250cmFjdCBpcyBsb2NrZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTMwCiAgICAvLyBsb2coQnl0ZXMoYiJYUmF5IENob3Jlb2dyYXBoeSBjb250cmFjdCBkZWxldGVkIHN1Y2Nlc3NmdWxseSIpKQogICAgcHVzaGJ5dGVzIDB4NTg1MjYxNzkyMDQzNjg2ZjcyNjU2ZjY3NzI2MTcwNjg3OTIwNjM2ZjZlNzQ3MjYxNjM3NDIwNjQ2NTZjNjU3NDY1NjQyMDczNzU2MzYzNjU3MzczNjY3NTZjNmM3OQogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5leGVjdXRlKCkgLT4gdWludDY0OgpleGVjdXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDYKICAgIC8vIGFzc2VydCBzZWxmLmxvY2tlZC52YWx1ZSA9PSBVSW50NjQoMCksICJDb250cmFjdCBpcyBsb2NrZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibG9ja2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2tlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBDb250cmFjdCBpcyBsb2NrZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTQ3CiAgICAvLyBleGVjdXRlZCA9IFRydWUKICAgIGludGNfMSAvLyAxCgpleGVjdXRlX3doaWxlX3RvcEAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDgKICAgIC8vIHdoaWxlIGV4ZWN1dGVkOgogICAgYnogZXhlY3V0ZV9hZnRlcl93aGlsZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjUyCiAgICAvLyBpZiBzZWxmLmUwLnZhbHVlID4gVUludDY0KDApOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImUwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmUwIGV4aXN0cwogICAgYnogZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NTMKICAgIC8vIHNlbGYuZTAudmFsdWUgLT0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiZTAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTAgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWMgNiAvLyAiZTAiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo1NAogICAgLy8gc2VsZi5lMS52YWx1ZSArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJlMSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18yIC8vICJlMSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjU1CiAgICAvLyByZXR1cm4gVUludDY0KDEpCiAgICBpbnRjXzEgLy8gMQoKZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LnN0YXJ0MUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTM0CiAgICAvLyBpZiBzZWxmLnN0YXJ0MSgpICE9IFVJbnQ2NCgwKToKICAgIGJ6IGV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMzUKICAgIC8vIHJldHVybiBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCgpleGVjdXRlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLmNob3Jlb2dyYXBoeS5jb250cmFjdC5zaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkuZXhlY3V0ZV9vbmVfcnVsZUAzMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTUwCiAgICAvLyBleGVjdXRlZCA9IHJ1bGVfZXhlY3V0ZWQgIT0gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIGIgZXhlY3V0ZV93aGlsZV90b3BAMQoKZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo3MQogICAgLy8gaWYgc2VsZi5lMi52YWx1ZSA+IFVJbnQ2NCgwKToKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJlMiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMiBleGlzdHMKICAgIGJ6IGV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAxNwogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo3MgogICAgLy8gaWYgc2VsZi5tc2cxX3BheWxvYWRfeC52YWx1ZSA+IFVJbnQ2NCgwKToKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJtc2cxX3BheWxvYWRfeCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tc2cxX3BheWxvYWRfeCBleGlzdHMKICAgIGJ6IGV4ZWN1dGVfZWxzZV9ib2R5QDE1CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjczCiAgICAvLyBsb2coQnl0ZXMoYiJCcmFuY2hpbmcgdG8gdGFzazIiKSkKICAgIHB1c2hieXRlcyAweDQyNzI2MTZlNjM2ODY5NmU2NzIwNzQ2ZjIwNzQ2MTczNmIzMgogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5Ojc0CiAgICAvLyBzZWxmLmUyLnZhbHVlIC09IFVJbnQ2NCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImUyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmUyIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGJ5dGVjXzAgLy8gImUyIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6NzUKICAgIC8vIHNlbGYuZTMudmFsdWUgKz0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZTMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTMgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWNfMyAvLyAiZTMiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAoKZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo4MAogICAgLy8gcmV0dXJuIFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKCmV4ZWN1dGVfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS54b3IxQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMzYKICAgIC8vIGlmIHNlbGYueG9yMSgpICE9IFVJbnQ2NCgwKToKICAgIGJ6IGV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAyMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMzcKICAgIC8vIHJldHVybiBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE0OQogICAgLy8gcnVsZV9leGVjdXRlZCA9IHNlbGYuZXhlY3V0ZV9vbmVfcnVsZSgpCiAgICBiIGV4ZWN1dGVfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5leGVjdXRlX29uZV9ydWxlQDMxCgpleGVjdXRlX2FmdGVyX2lmX2Vsc2VAMjA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBpZiBzZWxmLmU0LnZhbHVlID4gVUludDY0KDApOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImU0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmU0IGV4aXN0cwogICAgYnogZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDIyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5Ojk3CiAgICAvLyBsb2coQnl0ZXMoYiJQcm9jZXNzIGVuZGVkIHZpYSBlbmQxIikpCiAgICBwdXNoYnl0ZXMgMHg1MDcyNmY2MzY1NzM3MzIwNjU2ZTY0NjU2NDIwNzY2OTYxMjA2NTZlNjQzMQogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5Ojk4CiAgICAvLyBzZWxmLmU0LnZhbHVlIC09IFVJbnQ2NCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImU0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmU0IGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGJ5dGVjIDQgLy8gImU0IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6OTkKICAgIC8vIHJldHVybiBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCgpleGVjdXRlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLmNob3Jlb2dyYXBoeS5jb250cmFjdC5zaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkuZW5kMUAyMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTM4CiAgICAvLyBpZiBzZWxmLmVuZDEoKSAhPSBVSW50NjQoMCk6CiAgICBieiBleGVjdXRlX2FmdGVyX2lmX2Vsc2VAMjUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTM5CiAgICAvLyByZXR1cm4gVUludDY0KDEpCiAgICBpbnRjXzEgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDkKICAgIC8vIHJ1bGVfZXhlY3V0ZWQgPSBzZWxmLmV4ZWN1dGVfb25lX3J1bGUoKQogICAgYiBleGVjdXRlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLmNob3Jlb2dyYXBoeS5jb250cmFjdC5zaW1wbGVfQlBNTl9jaG9yZW9ncmFwaHkuZXhlY3V0ZV9vbmVfcnVsZUAzMQoKZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDI1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMDUKICAgIC8vIGlmIHNlbGYuZTUudmFsdWUgPiBVSW50NjQoMCk6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAiZTUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTUgZXhpc3RzCiAgICBieiBleGVjdXRlX2FmdGVyX2lmX2Vsc2VAMjcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTA2CiAgICAvLyBsb2coQnl0ZXMoYiJQcm9jZXNzIGVuZGVkIHZpYSBlbmQyIikpCiAgICBwdXNoYnl0ZXMgMHg1MDcyNmY2MzY1NzM3MzIwNjU2ZTY0NjU2NDIwNzY2OTYxMjA2NTZlNjQzMgogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjEwNwogICAgLy8gc2VsZi5lNS52YWx1ZSAtPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJlNSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lNSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBieXRlYyA1IC8vICJlNSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjEwOAogICAgLy8gcmV0dXJuIFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKCmV4ZWN1dGVfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5lbmQyQDI4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDAKICAgIC8vIGlmIHNlbGYuZW5kMigpICE9IFVJbnQ2NCgwKToKICAgIGJ6IGV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAzMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDEKICAgIC8vIHJldHVybiBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE0OQogICAgLy8gcnVsZV9leGVjdXRlZCA9IHNlbGYuZXhlY3V0ZV9vbmVfcnVsZSgpCiAgICBiIGV4ZWN1dGVfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuY2hvcmVvZ3JhcGh5LmNvbnRyYWN0LnNpbXBsZV9CUE1OX2Nob3Jlb2dyYXBoeS5leGVjdXRlX29uZV9ydWxlQDMxCgpleGVjdXRlX2FmdGVyX2lmX2Vsc2VAMzA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE0MgogICAgLy8gcmV0dXJuIFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTQ5CiAgICAvLyBydWxlX2V4ZWN1dGVkID0gc2VsZi5leGVjdXRlX29uZV9ydWxlKCkKICAgIGIgZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LmV4ZWN1dGVfb25lX3J1bGVAMzEKCmV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAyNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTA5CiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNDAKICAgIC8vIGlmIHNlbGYuZW5kMigpICE9IFVJbnQ2NCgwKToKICAgIGIgZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LmVuZDJAMjgKCmV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUAyMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTAwCiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMzgKICAgIC8vIGlmIHNlbGYuZW5kMSgpICE9IFVJbnQ2NCgwKToKICAgIGIgZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LmVuZDFAMjMKCmV4ZWN1dGVfZWxzZV9ib2R5QDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo3NwogICAgLy8gbG9nKEJ5dGVzKGIiQnJhbmNoaW5nIHRvIGVuZDIiKSkKICAgIHB1c2hieXRlcyAweDQyNzI2MTZlNjM2ODY5NmU2NzIwNzQ2ZjIwNjU2ZTY0MzIKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo3OAogICAgLy8gc2VsZi5lMi52YWx1ZSAtPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJlMiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMiBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBieXRlY18wIC8vICJlMiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5Ojc5CiAgICAvLyBzZWxmLmU1LnZhbHVlICs9IFVJbnQ2NCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gImU1IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmU1IGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjIDUgLy8gImU1IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIGIgZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDE2CgpleGVjdXRlX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjgxCiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxMzYKICAgIC8vIGlmIHNlbGYueG9yMSgpICE9IFVJbnQ2NCgwKToKICAgIGIgZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LnhvcjFAMTgKCmV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weTo1NgogICAgLy8gcmV0dXJuIFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTM0CiAgICAvLyBpZiBzZWxmLnN0YXJ0MSgpICE9IFVJbnQ2NCgwKToKICAgIGIgZXhlY3V0ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5jaG9yZW9ncmFwaHkuY29udHJhY3Quc2ltcGxlX0JQTU5fY2hvcmVvZ3JhcGh5LnN0YXJ0MUAxMAoKZXhlY3V0ZV9hZnRlcl93aGlsZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Nob3Jlb2dyYXBoeS9jb250cmFjdC5weToxNTMKICAgIC8vIHNlbGYuZTAudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJlMCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTU0CiAgICAvLyArIHNlbGYuZTEudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJlMSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lMSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTUzLTE1NAogICAgLy8gc2VsZi5lMC52YWx1ZQogICAgLy8gKyBzZWxmLmUxLnZhbHVlCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1NQogICAgLy8gKyBzZWxmLmUyLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZTIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTIgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1My0xNTUKICAgIC8vIHNlbGYuZTAudmFsdWUKICAgIC8vICsgc2VsZi5lMS52YWx1ZQogICAgLy8gKyBzZWxmLmUyLnZhbHVlCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1NgogICAgLy8gKyBzZWxmLmUzLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZTMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTMgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1My0xNTYKICAgIC8vIHNlbGYuZTAudmFsdWUKICAgIC8vICsgc2VsZi5lMS52YWx1ZQogICAgLy8gKyBzZWxmLmUyLnZhbHVlCiAgICAvLyArIHNlbGYuZTMudmFsdWUKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTU3CiAgICAvLyArIHNlbGYuZTQudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJlNCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lNCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTUzLTE1NwogICAgLy8gc2VsZi5lMC52YWx1ZQogICAgLy8gKyBzZWxmLmUxLnZhbHVlCiAgICAvLyArIHNlbGYuZTIudmFsdWUKICAgIC8vICsgc2VsZi5lMy52YWx1ZQogICAgLy8gKyBzZWxmLmU0LnZhbHVlCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1OAogICAgLy8gKyBzZWxmLmU1LnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAiZTUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZTUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1My0xNTgKICAgIC8vIHNlbGYuZTAudmFsdWUKICAgIC8vICsgc2VsZi5lMS52YWx1ZQogICAgLy8gKyBzZWxmLmUyLnZhbHVlCiAgICAvLyArIHNlbGYuZTMudmFsdWUKICAgIC8vICsgc2VsZi5lNC52YWx1ZQogICAgLy8gKyBzZWxmLmU1LnZhbHVlCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE1Mi0xNjAKICAgIC8vIGlmICgKICAgIC8vICAgICBzZWxmLmUwLnZhbHVlCiAgICAvLyAgICAgKyBzZWxmLmUxLnZhbHVlCiAgICAvLyAgICAgKyBzZWxmLmUyLnZhbHVlCiAgICAvLyAgICAgKyBzZWxmLmUzLnZhbHVlCiAgICAvLyAgICAgKyBzZWxmLmU0LnZhbHVlCiAgICAvLyAgICAgKyBzZWxmLmU1LnZhbHVlCiAgICAvLyAgICAgPiBVSW50NjQoMCkKICAgIC8vICk6CiAgICBieiBleGVjdXRlX2Vsc2VfYm9keUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE2MQogICAgLy8gbG9nKEJ5dGVzKGIiVGhlIHByb2Nlc3MgaW5zdGFuY2UgaXMgUlVOTklORyIpKQogICAgcHVzaGJ5dGVzIDB4NTQ2ODY1MjA3MDcyNmY2MzY1NzM3MzIwNjk2ZTczNzQ2MTZlNjM2NTIwNjk3MzIwNTI1NTRlNGU0OTRlNDcKICAgIGxvZwoKZXhlY3V0ZV9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2hvcmVvZ3JhcGh5L2NvbnRyYWN0LnB5OjE2NAogICAgLy8gcmV0dXJuIFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKZXhlY3V0ZV9lbHNlX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jaG9yZW9ncmFwaHkvY29udHJhY3QucHk6MTYzCiAgICAvLyBsb2coQnl0ZXMoYiJUaGUgcHJvY2VzcyBpbnN0YW5jZSBpcyBDT01QTEVURUQiKSkKICAgIHB1c2hieXRlcyAweDU0Njg2NTIwNzA3MjZmNjM2NTczNzMyMDY5NmU3Mzc0NjE2ZTYzNjUyMDY5NzMyMDQzNGY0ZDUwNGM0NTU0NDU0NAogICAgbG9nCiAgICBiIGV4ZWN1dGVfYWZ0ZXJfaWZfZWxzZUA2Cg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmDAJlMgZsb2NrZWQCZTECZTMCZTQCZTUCZTAFYWRtaW4ObXNnMV9wYXlsb2FkX3gHcGFydHlfYQdwYXJ0eV9iDm1zZzJfcGF5bG9hZF95MRhAAGonCYAgg/GGv+mYR7/JND7iF0ZefJSNOjHAQPC0RxcGCzNZZ9pnJwqAIIQ+z/kACjW9cgDWBID5XTpwPGXO86SYkO12TFV555qlZycGImcqImcoImcrImcnBCJnJwUiZycIImcnCyJnKSJnMRtBAHyCBQSB3onuBPtWKv4E2Q+fawQkN408BMzzf4s2GgCOBQBCADIAJgAYAAIiQzEZFEQxGESIAaUWgAQVH3x1TFCwI0MxGYEFEkQxGESIAUsjQzEZFEQxGESIAQgjQzEZFEQxGEQ2GgEXiACWI0MxGRREMRhENhoBF4gAUyNDIoEEMRmOAgALAANC/6AxGESIAKUjQ4gAAiNDJwYjZycHMQBnKSJngCZDaG9yZW9ncmFwaHkgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LrCJigEAIillRBREIiplREQxACInCWVEEkQiKmVEIwkqTGcnCIv/ZyIoZUQjCChMZ4gA3UiJigEAIillRBREIitlREQxACInCmVEEkQiK2VEIwkrTGcnC4v/ZyInBGVEIwgnBExniACoSIkxACInB2VEEkQpI2eAHUNvbnRyYWN0IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5sIkxACInB2VEEkQpImeAJ0NvbnRyYWN0IHZhcmlhYmxlcyB1cGRhdGVkIHN1Y2Nlc3NmdWxsebCJMQAiJwdlRBJEIillRBREgC9YUmF5IENob3Jlb2dyYXBoeSBjb250cmFjdCBkZWxldGVkIHN1Y2Nlc3NmdWxsebCJIillRBREI0EBCyInBmVEQQD/IicGZUQjCScGTGciKmVEIwgqTGcjQQAGIyITQv/XIihlREEA1iInCGVEQQCjgBJCcmFuY2hpbmcgdG8gdGFzazKwIihlRCMJKExnIitlRCMIK0xnI0EABCNC/70iJwRlREEAaIAWUHJvY2VzcyBlbmRlZCB2aWEgZW5kMbAiJwRlRCMJJwRMZyNBAAQjQv+JIicFZURBADCAFlByb2Nlc3MgZW5kZWQgdmlhIGVuZDKwIicFZUQjCScFTGcjQQAEI0L/VSJC/1EiQv/xIkL/uYARQnJhbmNoaW5nIHRvIGVuZDKwIihlRCMJKExnIicFZUQjCCcFTGdC/1kiQv9WIkL/EiInBmVEIiplRAgiKGVECCIrZUQIIicEZUQIIicFZUQIQQAkgB9UaGUgcHJvY2VzcyBpbnN0YW5jZSBpcyBSVU5OSU5HsCOJgCFUaGUgcHJvY2VzcyBpbnN0YW5jZSBpcyBDT01QTEVURUSwQv/X",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}